// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlyPan.Models;

#nullable disable

namespace OnlyPan.Migrations
{
    [DbContext(typeof(OnlyPanContext))]
    [Migration("20231002015419_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OnlyPan.Models.Auditorium", b =>
                {
                    b.Property<string>("Accion")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("accion");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.Property<int?>("IdAuditoria")
                        .HasColumnType("int")
                        .HasColumnName("id_auditoria");

                    b.Property<string>("Sq")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("sq");

                    b.Property<string>("Tabla")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("tabla");

                    b.Property<int?>("Usuario")
                        .HasColumnType("int")
                        .HasColumnName("usuario");

                    b.ToTable("AUDITORIA", (string)null);
                });

            modelBuilder.Entity("OnlyPan.Models.Categorium", b =>
                {
                    b.Property<int>("IdCategoria")
                        .HasColumnType("int")
                        .HasColumnName("id_categoria");

                    b.Property<string>("Categoria")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("categoria");

                    b.Property<int?>("Receta")
                        .HasColumnType("int")
                        .HasColumnName("receta");

                    b.HasKey("IdCategoria");

                    b.ToTable("CATEGORIA", (string)null);
                });

            modelBuilder.Entity("OnlyPan.Models.Comentario", b =>
                {
                    b.Property<int>("IdInteraccion")
                        .HasColumnType("int")
                        .HasColumnName("id_interaccion");

                    b.Property<string>("Comentario1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("comentario");

                    b.Property<int?>("Estado")
                        .HasColumnType("int")
                        .HasColumnName("estado");

                    b.Property<DateTime?>("FechaInteracion")
                        .HasColumnType("date")
                        .HasColumnName("fecha_interacion");

                    b.Property<int?>("Receta")
                        .HasColumnType("int")
                        .HasColumnName("receta");

                    b.Property<int?>("Usuario")
                        .HasColumnType("int")
                        .HasColumnName("usuario");

                    b.HasKey("IdInteraccion");

                    b.HasIndex("Estado");

                    b.HasIndex("Receta");

                    b.HasIndex("Usuario");

                    b.ToTable("COMENTARIO", (string)null);
                });

            modelBuilder.Entity("OnlyPan.Models.Donacion", b =>
                {
                    b.Property<int>("IdDonacion")
                        .HasColumnType("int")
                        .HasColumnName("id_donacion");

                    b.Property<int?>("Donador")
                        .HasColumnType("int")
                        .HasColumnName("donador");

                    b.Property<DateTime?>("FechaDonacion")
                        .HasColumnType("date")
                        .HasColumnName("fecha_donacion");

                    b.Property<decimal?>("Monto")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("monto");

                    b.HasKey("IdDonacion");

                    b.HasIndex("Donador");

                    b.ToTable("DONACION", (string)null);
                });

            modelBuilder.Entity("OnlyPan.Models.Estado", b =>
                {
                    b.Property<int>("IdEstado")
                        .HasColumnType("int")
                        .HasColumnName("id_estado");

                    b.Property<string>("DescripcionEstado")
                        .HasColumnType("text")
                        .HasColumnName("descripcion_estado");

                    b.Property<string>("NombreEstado")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre_estado");

                    b.HasKey("IdEstado");

                    b.ToTable("ESTADO", (string)null);
                });

            modelBuilder.Entity("OnlyPan.Models.Etiquetum", b =>
                {
                    b.Property<int>("IdEtiqueta")
                        .HasColumnType("int")
                        .HasColumnName("id_etiqueta");

                    b.Property<string>("Etiqueta")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("etiqueta");

                    b.Property<int?>("Receta")
                        .HasColumnType("int")
                        .HasColumnName("receta");

                    b.HasKey("IdEtiqueta");

                    b.ToTable("ETIQUETA", (string)null);
                });

            modelBuilder.Entity("OnlyPan.Models.Ingrediente", b =>
                {
                    b.Property<int>("IdIngrediente")
                        .HasColumnType("int")
                        .HasColumnName("id_ingrediente");

                    b.Property<string>("Ingrediente1")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("ingrediente");

                    b.Property<int?>("Receta")
                        .HasColumnType("int")
                        .HasColumnName("receta");

                    b.HasKey("IdIngrediente");

                    b.ToTable("INGREDIENTE", (string)null);
                });

            modelBuilder.Entity("OnlyPan.Models.RecetaChef", b =>
                {
                    b.Property<int>("IdActuacion")
                        .HasColumnType("int")
                        .HasColumnName("id_actuacion");

                    b.Property<int?>("Chef")
                        .HasColumnType("int")
                        .HasColumnName("chef");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("date")
                        .HasColumnName("fecha_actualizacion");

                    b.Property<int?>("Receta")
                        .HasColumnType("int")
                        .HasColumnName("receta");

                    b.HasKey("IdActuacion");

                    b.HasIndex("Chef");

                    b.HasIndex("Receta");

                    b.ToTable("RECETA_CHEF", (string)null);
                });

            modelBuilder.Entity("OnlyPan.Models.RecetaIngrediente", b =>
                {
                    b.Property<int>("IdLista")
                        .HasColumnType("int")
                        .HasColumnName("id_lista");

                    b.Property<decimal?>("Cantidad")
                        .HasColumnType("decimal(3, 2)")
                        .HasColumnName("cantidad");

                    b.Property<int?>("Ingrediente")
                        .HasColumnType("int")
                        .HasColumnName("ingrediente");

                    b.HasKey("IdLista")
                        .HasName("PK_LISTA");

                    b.HasIndex("Ingrediente");

                    b.ToTable("RECETA_INGREDIENTE", (string)null);
                });

            modelBuilder.Entity("OnlyPan.Models.Recetum", b =>
                {
                    b.Property<int>("IdReceta")
                        .HasColumnType("int")
                        .HasColumnName("id_receta");

                    b.Property<int?>("Categoria")
                        .HasColumnType("int")
                        .HasColumnName("categoria");

                    b.Property<bool?>("Estado")
                        .HasColumnType("bit")
                        .HasColumnName("estado");

                    b.Property<int?>("Etiqueta")
                        .HasColumnType("int")
                        .HasColumnName("etiqueta");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("date")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("Foto")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("foto");

                    b.Property<string>("Instrucciones")
                        .HasColumnType("text")
                        .HasColumnName("instrucciones");

                    b.Property<int?>("Lista")
                        .HasColumnType("int")
                        .HasColumnName("lista");

                    b.Property<string>("TituloPlato")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("titulo_plato");

                    b.HasKey("IdReceta");

                    b.HasIndex("Categoria");

                    b.HasIndex("Etiqueta");

                    b.HasIndex("Lista");

                    b.ToTable("RECETA", (string)null);
                });

            modelBuilder.Entity("OnlyPan.Models.ReplicaUsuario", b =>
                {
                    b.Property<int>("IdReplica")
                        .HasColumnType("int")
                        .HasColumnName("id_replica");

                    b.Property<string>("Comentario")
                        .HasColumnType("text")
                        .HasColumnName("comentario");

                    b.Property<DateTime?>("FechaConsulta")
                        .HasColumnType("date")
                        .HasColumnName("fecha_consulta");

                    b.Property<int?>("Receta")
                        .HasColumnType("int")
                        .HasColumnName("receta");

                    b.Property<int?>("Usuario")
                        .HasColumnType("int")
                        .HasColumnName("usuario");

                    b.HasKey("IdReplica");

                    b.HasIndex("Receta");

                    b.HasIndex("Usuario");

                    b.ToTable("REPLICA_USUARIO", (string)null);
                });

            modelBuilder.Entity("OnlyPan.Models.Rol", b =>
                {
                    b.Property<int>("IdRol")
                        .HasColumnType("int")
                        .HasColumnName("id_rol");

                    b.Property<string>("NombreRol")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("nombre_rol");

                    b.HasKey("IdRol");

                    b.ToTable("ROL", (string)null);
                });

            modelBuilder.Entity("OnlyPan.Models.SeguirUsuario", b =>
                {
                    b.Property<int>("IdSeguir")
                        .HasColumnType("int")
                        .HasColumnName("id_seguir");

                    b.Property<int?>("Estado")
                        .HasColumnType("int")
                        .HasColumnName("estado");

                    b.Property<DateTime?>("FechaSeguimiento")
                        .HasColumnType("date")
                        .HasColumnName("fecha_seguimiento");

                    b.Property<int?>("Seguido")
                        .HasColumnType("int")
                        .HasColumnName("seguido");

                    b.Property<int?>("Seguidor")
                        .HasColumnType("int")
                        .HasColumnName("seguidor");

                    b.Property<int?>("SeguidoresChef")
                        .HasColumnType("int")
                        .HasColumnName("seguidores_chef");

                    b.HasKey("IdSeguir");

                    b.HasIndex("Estado");

                    b.HasIndex("Seguido");

                    b.HasIndex("Seguidor");

                    b.ToTable("SEGUIR_USUARIO", (string)null);
                });

            modelBuilder.Entity("OnlyPan.Models.SolicitudRol", b =>
                {
                    b.Property<int>("IdSolicitud")
                        .HasColumnType("int")
                        .HasColumnName("id_solicitud");

                    b.Property<string>("Comentario")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("comentario");

                    b.Property<int?>("EstadoSolicitud")
                        .HasColumnType("int")
                        .HasColumnName("estado_solicitud");

                    b.Property<DateTime?>("FechaAprovacion")
                        .HasColumnType("date")
                        .HasColumnName("fecha_aprovacion");

                    b.Property<DateTime?>("FechaSolicitud")
                        .HasColumnType("date")
                        .HasColumnName("fecha_solicitud");

                    b.Property<int?>("RolSolicitado")
                        .HasColumnType("int")
                        .HasColumnName("rol_solicitado");

                    b.Property<int?>("UsuarioAprovador")
                        .HasColumnType("int")
                        .HasColumnName("usuario_aprovador");

                    b.Property<int?>("UsuarioSolicitud")
                        .HasColumnType("int")
                        .HasColumnName("usuario_solicitud");

                    b.HasKey("IdSolicitud")
                        .HasName("PK_SOLICITUD_ROLES");

                    b.HasIndex("EstadoSolicitud");

                    b.HasIndex("RolSolicitado");

                    b.HasIndex("UsuarioAprovador");

                    b.HasIndex("UsuarioSolicitud");

                    b.ToTable("SOLICITUD_ROL", (string)null);
                });

            modelBuilder.Entity("OnlyPan.Models.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUsuario"));

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("contraseña");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("correo");

                    b.Property<int?>("Estado")
                        .HasColumnType("int")
                        .HasColumnName("estado");

                    b.Property<DateTime?>("FechaInscrito")
                        .HasColumnType("date")
                        .HasColumnName("fecha_inscrito");

                    b.Property<string>("Foto")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("foto");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("nombre");

                    b.Property<int>("Rol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rol")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("IdUsuario");

                    b.HasIndex("Estado");

                    b.HasIndex("Rol");

                    b.ToTable("USUARIO", (string)null);
                });

            modelBuilder.Entity("OnlyPan.Models.Valoracion", b =>
                {
                    b.Property<int>("IdInteraccion")
                        .HasColumnType("int")
                        .HasColumnName("id_interaccion");

                    b.Property<int?>("Estado")
                        .HasColumnType("int")
                        .HasColumnName("estado");

                    b.Property<DateTime?>("FechaInteracion")
                        .HasColumnType("date")
                        .HasColumnName("fecha_interacion");

                    b.Property<int?>("Receta")
                        .HasColumnType("int")
                        .HasColumnName("receta");

                    b.Property<int?>("Usuario")
                        .HasColumnType("int")
                        .HasColumnName("usuario");

                    b.Property<int?>("Valoracion1")
                        .HasColumnType("int")
                        .HasColumnName("valoracion");

                    b.HasKey("IdInteraccion");

                    b.HasIndex("Estado");

                    b.HasIndex("Receta");

                    b.HasIndex("Usuario");

                    b.ToTable("VALORACION", (string)null);
                });

            modelBuilder.Entity("OnlyPan.Models.Comentario", b =>
                {
                    b.HasOne("OnlyPan.Models.Estado", "EstadoNavigation")
                        .WithMany("Comentarios")
                        .HasForeignKey("Estado")
                        .HasConstraintName("FK_comentario_estado");

                    b.HasOne("OnlyPan.Models.Recetum", "RecetaNavigation")
                        .WithMany("Comentarios")
                        .HasForeignKey("Receta")
                        .HasConstraintName("FK_comentario_receta");

                    b.HasOne("OnlyPan.Models.Usuario", "UsuarioNavigation")
                        .WithMany("Comentarios")
                        .HasForeignKey("Usuario")
                        .HasConstraintName("FK_comentario_usuario");

                    b.Navigation("EstadoNavigation");

                    b.Navigation("RecetaNavigation");

                    b.Navigation("UsuarioNavigation");
                });

            modelBuilder.Entity("OnlyPan.Models.Donacion", b =>
                {
                    b.HasOne("OnlyPan.Models.Usuario", "DonadorNavigation")
                        .WithMany("Donacions")
                        .HasForeignKey("Donador")
                        .HasConstraintName("FK_donacion_donador");

                    b.Navigation("DonadorNavigation");
                });

            modelBuilder.Entity("OnlyPan.Models.RecetaChef", b =>
                {
                    b.HasOne("OnlyPan.Models.Usuario", "ChefNavigation")
                        .WithMany("RecetaChefs")
                        .HasForeignKey("Chef")
                        .HasConstraintName("FK_rc_chef");

                    b.HasOne("OnlyPan.Models.Recetum", "RecetaNavigation")
                        .WithMany("RecetaChefs")
                        .HasForeignKey("Receta")
                        .HasConstraintName("FK_rc_receta");

                    b.Navigation("ChefNavigation");

                    b.Navigation("RecetaNavigation");
                });

            modelBuilder.Entity("OnlyPan.Models.RecetaIngrediente", b =>
                {
                    b.HasOne("OnlyPan.Models.Ingrediente", "IngredienteNavigation")
                        .WithMany("RecetaIngredientes")
                        .HasForeignKey("Ingrediente")
                        .HasConstraintName("FK_Ingrediente_Lista");

                    b.Navigation("IngredienteNavigation");
                });

            modelBuilder.Entity("OnlyPan.Models.Recetum", b =>
                {
                    b.HasOne("OnlyPan.Models.Categorium", "CategoriaNavigation")
                        .WithMany("RecetaNavigation")
                        .HasForeignKey("Categoria")
                        .HasConstraintName("FK_receta_categoria");

                    b.HasOne("OnlyPan.Models.Etiquetum", "EtiquetaNavigation")
                        .WithMany("RecetaNavigation")
                        .HasForeignKey("Etiqueta")
                        .HasConstraintName("FK_receta_etiqueta");

                    b.HasOne("OnlyPan.Models.RecetaIngrediente", "ListaNavigation")
                        .WithMany("Receta")
                        .HasForeignKey("Lista")
                        .HasConstraintName("FK_receta_lista");

                    b.Navigation("CategoriaNavigation");

                    b.Navigation("EtiquetaNavigation");

                    b.Navigation("ListaNavigation");
                });

            modelBuilder.Entity("OnlyPan.Models.ReplicaUsuario", b =>
                {
                    b.HasOne("OnlyPan.Models.Recetum", "RecetaNavigation")
                        .WithMany("ReplicaUsuarios")
                        .HasForeignKey("Receta")
                        .HasConstraintName("FK_ru_receta");

                    b.HasOne("OnlyPan.Models.Usuario", "UsuarioNavigation")
                        .WithMany("ReplicaUsuarios")
                        .HasForeignKey("Usuario")
                        .HasConstraintName("FK_ru_usuario");

                    b.Navigation("RecetaNavigation");

                    b.Navigation("UsuarioNavigation");
                });

            modelBuilder.Entity("OnlyPan.Models.SeguirUsuario", b =>
                {
                    b.HasOne("OnlyPan.Models.Estado", "EstadoNavigation")
                        .WithMany("SeguirUsuarios")
                        .HasForeignKey("Estado")
                        .HasConstraintName("FK_seguir_estado");

                    b.HasOne("OnlyPan.Models.Usuario", "SeguidoNavigation")
                        .WithMany("SeguirUsuarioSeguidoNavigations")
                        .HasForeignKey("Seguido")
                        .HasConstraintName("FK_seguir_seguido");

                    b.HasOne("OnlyPan.Models.Usuario", "SeguidorNavigation")
                        .WithMany("SeguirUsuarioSeguidorNavigations")
                        .HasForeignKey("Seguidor")
                        .HasConstraintName("FK_seguir_seguidor");

                    b.Navigation("EstadoNavigation");

                    b.Navigation("SeguidoNavigation");

                    b.Navigation("SeguidorNavigation");
                });

            modelBuilder.Entity("OnlyPan.Models.SolicitudRol", b =>
                {
                    b.HasOne("OnlyPan.Models.Estado", "EstadoSolicitudNavigation")
                        .WithMany("SolicitudRols")
                        .HasForeignKey("EstadoSolicitud")
                        .HasConstraintName("FK_solicitud_estado");

                    b.HasOne("OnlyPan.Models.Rol", "RolSolicitadoNavigation")
                        .WithMany("SolicitudRols")
                        .HasForeignKey("RolSolicitado")
                        .HasConstraintName("FK_solicitud_rol");

                    b.HasOne("OnlyPan.Models.Usuario", "UsuarioAprovadorNavigation")
                        .WithMany("SolicitudRolUsuarioAprovadorNavigations")
                        .HasForeignKey("UsuarioAprovador")
                        .HasConstraintName("FK_solicitud_usuario_aprovador");

                    b.HasOne("OnlyPan.Models.Usuario", "UsuarioSolicitudNavigation")
                        .WithMany("SolicitudRolUsuarioSolicitudNavigations")
                        .HasForeignKey("UsuarioSolicitud")
                        .HasConstraintName("FK_solicitud_usuario");

                    b.Navigation("EstadoSolicitudNavigation");

                    b.Navigation("RolSolicitadoNavigation");

                    b.Navigation("UsuarioAprovadorNavigation");

                    b.Navigation("UsuarioSolicitudNavigation");
                });

            modelBuilder.Entity("OnlyPan.Models.Usuario", b =>
                {
                    b.HasOne("OnlyPan.Models.Estado", "EstadoNavigation")
                        .WithMany("Usuarios")
                        .HasForeignKey("Estado")
                        .HasConstraintName("FK_usuario_estado");

                    b.HasOne("OnlyPan.Models.Rol", "RolNavigation")
                        .WithMany("Usuarios")
                        .HasForeignKey("Rol")
                        .IsRequired()
                        .HasConstraintName("FK_usuario_rol");

                    b.Navigation("EstadoNavigation");

                    b.Navigation("RolNavigation");
                });

            modelBuilder.Entity("OnlyPan.Models.Valoracion", b =>
                {
                    b.HasOne("OnlyPan.Models.Estado", "EstadoNavigation")
                        .WithMany("Valoracions")
                        .HasForeignKey("Estado")
                        .HasConstraintName("FK_valoracion_estado");

                    b.HasOne("OnlyPan.Models.Recetum", "RecetaNavigation")
                        .WithMany("Valoracions")
                        .HasForeignKey("Receta")
                        .HasConstraintName("FK_valoracion_receta");

                    b.HasOne("OnlyPan.Models.Usuario", "UsuarioNavigation")
                        .WithMany("Valoracions")
                        .HasForeignKey("Usuario")
                        .HasConstraintName("FK_valoracion_usuario");

                    b.Navigation("EstadoNavigation");

                    b.Navigation("RecetaNavigation");

                    b.Navigation("UsuarioNavigation");
                });

            modelBuilder.Entity("OnlyPan.Models.Categorium", b =>
                {
                    b.Navigation("RecetaNavigation");
                });

            modelBuilder.Entity("OnlyPan.Models.Estado", b =>
                {
                    b.Navigation("Comentarios");

                    b.Navigation("SeguirUsuarios");

                    b.Navigation("SolicitudRols");

                    b.Navigation("Usuarios");

                    b.Navigation("Valoracions");
                });

            modelBuilder.Entity("OnlyPan.Models.Etiquetum", b =>
                {
                    b.Navigation("RecetaNavigation");
                });

            modelBuilder.Entity("OnlyPan.Models.Ingrediente", b =>
                {
                    b.Navigation("RecetaIngredientes");
                });

            modelBuilder.Entity("OnlyPan.Models.RecetaIngrediente", b =>
                {
                    b.Navigation("Receta");
                });

            modelBuilder.Entity("OnlyPan.Models.Recetum", b =>
                {
                    b.Navigation("Comentarios");

                    b.Navigation("RecetaChefs");

                    b.Navigation("ReplicaUsuarios");

                    b.Navigation("Valoracions");
                });

            modelBuilder.Entity("OnlyPan.Models.Rol", b =>
                {
                    b.Navigation("SolicitudRols");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("OnlyPan.Models.Usuario", b =>
                {
                    b.Navigation("Comentarios");

                    b.Navigation("Donacions");

                    b.Navigation("RecetaChefs");

                    b.Navigation("ReplicaUsuarios");

                    b.Navigation("SeguirUsuarioSeguidoNavigations");

                    b.Navigation("SeguirUsuarioSeguidorNavigations");

                    b.Navigation("SolicitudRolUsuarioAprovadorNavigations");

                    b.Navigation("SolicitudRolUsuarioSolicitudNavigations");

                    b.Navigation("Valoracions");
                });
#pragma warning restore 612, 618
        }
    }
}
